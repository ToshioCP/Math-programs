#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'


require 'strscan'

module MathPrograms
  class ACR < Racc::Parser

module_eval(<<'...end acr.y/module_eval...', 'acr.y', 26)

attr_accessor :expression

def initialize expression
  @expression = expression
end

def calc
  @tokens = lex(@expression)
  do_parse
end

def lex(s)
  ss = StringScanner.new(s)
  tokens = []
  until ss.eos?
    if ss.scan(/[[:digit:]]+/)
      tokens << [:NUM, ss[0].to_i]
    elsif ss.scan(/[+\-*\/()=;]/)
      tokens << [ss[0],ss[0]]
    elsif ss.scan(/\s+/)
      # ignore spaces
    else
      raise "Unexpected character."
    end
  end
  tokens << [false, nil] # end mark
  tokens
end

def next_token
  @tokens.shift
end

...end acr.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     5,     4,     9,    10,     7,     8,     9,    10,     7,
     8,     9,    10,    18,     2,     5,     4,     2,     5,     4,
     2,     5,     4,     2,     5,     4,     2,     5,     4,     2,
     5,     4,     9,    10,    13 ]

racc_action_check = [
     1,     2,     2,     1,     1,     1,     1,    12,    12,    12,
    12,    14,    14,    12,     0,     0,     0,     4,     4,     4,
     7,     7,     7,     8,     8,     8,     9,     9,     9,    10,
    10,    10,    15,    15,     6 ]

racc_action_pointer = [
     8,     0,    -6,   nil,    11,   nil,    34,    14,    17,    20,
    23,   nil,     4,   nil,     8,    29,   nil,   nil,   nil ]

racc_action_default = [
    -9,    -9,    -9,    -6,    -9,    -8,    -9,    -9,    -9,    -9,
    -9,    -5,    -9,    19,    -1,    -2,    -3,    -4,    -7 ]

racc_goto_table = [
     1,    11,   nil,   nil,    12,   nil,   nil,    14,    15,    16,
    17 ]

racc_goto_check = [
     1,     2,   nil,   nil,     1,   nil,   nil,     1,     1,     1,
     1 ]

racc_goto_pointer = [
   nil,     0,    -1 ]

racc_goto_default = [
   nil,   nil,     3 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 11, :_reduce_1,
  3, 11, :_reduce_2,
  3, 11, :_reduce_3,
  3, 11, :_reduce_4,
  2, 11, :_reduce_5,
  1, 11, :_reduce_none,
  3, 12, :_reduce_7,
  1, 12, :_reduce_none ]

racc_reduce_n = 9

racc_shift_n = 19

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  :NUM => 7,
  "(" => 8,
  ")" => 9 }

racc_nt_base = 10

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "NUM",
  "\"(\"",
  "\")\"",
  "$start",
  "expression",
  "primary" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'acr.y', 10)
  def _reduce_1(val, _values)
     val[0] + val[2]
  end
.,.,

module_eval(<<'.,.,', 'acr.y', 11)
  def _reduce_2(val, _values)
     val[0] - val[2]
  end
.,.,

module_eval(<<'.,.,', 'acr.y', 12)
  def _reduce_3(val, _values)
     val[0] * val[2]
  end
.,.,

module_eval(<<'.,.,', 'acr.y', 13)
  def _reduce_4(val, _values)
     if (val[2] != 0) then Rational(val[0], val[2]) else raise("Division by zero.") end
  end
.,.,

module_eval(<<'.,.,', 'acr.y', 14)
  def _reduce_5(val, _values)
     -(val[1])
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'acr.y', 16)
  def _reduce_7(val, _values)
     val[1]
  end
.,.,

# reduce 8 omitted

def _reduce_none(val, _values)
  val[0]
end

  end   # class ACR
end   # module MathPrograms

#
